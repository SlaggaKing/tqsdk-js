js端需要完成的业务线：

初始化时：
    从存储器加载所有指标代码
    遍历各指标类，构建指标类描述结构
    指标类列表发往主进程
    
收到创建/修改指标实例指令时：
    构建指标实例
    计算过程中所用的合约序列需发送订阅请求
    重新计算指标输出值
    
收到行情数据时：
    对各指标实例进行重算，并将重算结果发回主进程

用户编辑指标完成：
    检查代码是否有语法错误
    替换原函数
    存档
    重新生成指标类描述，发往主进程

双边交互时间线安排：
    主进程拉起
    主进程开websocket server
    子进程拉起
    子进程websocket client接通
    子进程发送初始化包（包含所有指标类信息）
    主进程加载存档
    主进程发送指标实例包到js进程
    js进程开始计算

复杂输出序列：
    输出有两个层级：数据序列(总是一个double[]) 和 绘图图元（依赖0-N个序列的值）
    主程序只需要知道图元这一级的概念
        主程序不能改style，只能配color/width
        主程序内存:
            {
                "serial_name":{
                    "point_id":vector<double>,
                    "point_id":vector<double>,
                }
            }
        js端数据和传送数据包也使用此格式

函数标记：
    技术指标
        主图
            使用主Y轴
        副图
            一定要独占一个图
    其它辅助动作



先搞定协议，实现可用，再优化js端代码
    输入参数需要支持 float/int/color/selector


首版发布前任务：
    js端
        实现编辑器和存取档
        实现函数库
        性能优化
            来数据时只计算相关指标
            跳过已计算部分
            跳过屏幕不显示部分

    主进程端
        绘图类型/颜色实现
        坐标方案及默认值
        测试嵌入cef效果/更新cef版本
        实现主程序启动流程
            修正存取档流程

    外部
        指标转换器
    文档


























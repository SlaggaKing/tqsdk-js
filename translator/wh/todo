工作顺序:
    js端自身改进:
        与SDK共同整理结构, 使TA完全基于SDK运行
            web worker的特殊问题
        代码结构清理到文件

    新翻译器
        错误处理和提示信息
        出错时, 跳过错误行, 给出部分翻译结果
        对于翻译不好的行给出标注
        其它的行赋值方式
        错误处理时给出的信息不好


问题焦点:
    我方没有一个完整的解决体系
        比如下单使用连续追价如何实现
        如何引用别的技术指标

    处理:
        应该基于SDK为核心, TA是SDK的应用包装, 双方资源共享
        技术指标只有
        使用 import / export 方式管理多个文件

    双方框架结构差别较大
        文华代码混合了过程式及函数式风格
        某些代码难以简单对位转换
            这个差异工作量无法减少
            直接运行:
                javascript yacc
                native yacc
                没有明显优点
            留给用户手工处理:
                用python开发翻译器已经是最简单的了
                需要保证翻译后代码的可读性


对用户的效果:
    文华全转运行
        只要有一个关键字搞不定, 就废了
    文华转换后, 可以在js上继续编辑补全运行
        必须向用户展示转换后的代码

    首先尝试自己成为一个完备系统
        API 上的缺口:
            各种画图
        常用工具

    尝试其它两家是否较容易
    TB:
        保留关键字少, 系统函数都是以源码形式提供
        用户导入时, 除提供最终函数外, 整个依赖树代码也要拿到
        缺少好的迁移方案




